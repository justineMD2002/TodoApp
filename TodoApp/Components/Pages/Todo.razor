@page "/"
@rendermode InteractiveServer

<PageTitle>TodoMVC: BLAZOR</PageTitle>

<style>
    .bottom-shadow {
        box-shadow: 0 1px 1px rgba(0, 0, 0, 0.2),
            0 8px 0 -3px #f6f6f6,
            0 9px 1px -3px rgba(0, 0, 0, 0.2),
            0 16px 0 -6px #f6f6f6,
            0 17px 2px -6px rgba(0, 0, 0, 0.2);
    }
</style>

<header class="mb-3">
    <h1 class="font-sans text-center text-[60px] text-[#bc3e45] font-semibold">todos</h1>
</header>

<main class="w-[500px] mx-auto shadow-[0_5px_20px_rgba(0,0,0,0.2)] relative">
    <div class="absolute left-0 right-0 bottom-0 h-[50px] overflow-hidden pointer-events-none bottom-shadow"></div>

    <div
        class="flex items-center w-full text-[25px] border border-transparent transition-shadow duration-300 ease-in-out focus-within:shadow-[0_0_5px_#bc3e45] focus-within:border-[#bc3e45]">
        <button
            class="bg-transparent border-2 cursor-pointer text-[30px] ml-5 text-gray-500 outline-none border-transparent"
            @onclick="HandleVButtonClick">
            @if (todos.Any())
            {
                <span>v</span>
            }
        </button>

        <input class="flex-1 p-[15px] italic text-[25px] border-0 outline-none" placeholder="What needs to be done?"
            @bind="newTodo" @bind:event="oninput" @onfocus="CloseEditing" @onkeydown="HandleKeyPress" />
    </div>

    @if (filteredTodos.Any())
    {
        <ul class="pl-0 mt-0 w-full">
            @foreach (var todo in filteredTodos)
            {
                if (todo.IsBeingEdited)
                {
                    <input
                        class="w-full py-[10px] px-[55px] border-0 text-[25px] bg-white relative z-50 shadow-[0_0_5px_#bc3e45] outline-none rounded-[5px]"
                        @bind="todo.Title" @onkeydown="(e) => SaveEditOnEnter(e, todo)" @onblur="() => StopEditing(todo)"
                        @ref="editInput" />
                }
                else
                {
                    <li class="group flex items-center p-[10px] border-t border-b border-[#ddd] text-[25px] bg-white"
                        @ondblclick="() => StartEditing(todo)">
                        <input type="checkbox" checked="@todo.IsDone" @onchange="() => ToggleCompleted(todo)"
                            @onclick:stopPropagation class="
                     relative
                     appearance-none
                     w-[30px] h-[30px]
                     rounded-full
                     border-2 border-gray-500
                     cursor-pointer
                     outline-none

                     checked:bg-white
                     checked:border-[#4CAF50]
                     checked:after:content-['✓']
                     checked:after:absolute
                     checked:after:top-1/2
                     checked:after:left-1/2
                     checked:after:-translate-x-1/2
                     checked:after:-translate-y-1/2
                     checked:after:text-[20px]
                     checked:after:text-[#4CAF50]
                   " />

                        <span class="flex-1 ml-5 @(todo.IsDone ? "line-through text-gray-500" : "")">
                            @todo.Title
                        </span>

                        <span
                            class="cursor-pointer ml-[5px] text-[#bc3e45] text-[16px] invisible group-hover:visible transition duration-300 ease-in-out"
                            @onclick="() => RemoveTodo(todo)">
                            ❌
                        </span>
                    </li>
                }
            }
        </ul>
    }

    @if (todos.Any())
    {
        <footer>
            <div class="flex text-[15px] p-[10px]">
                <div class="whitespace-nowrap">
                    @ActiveItemsCount @(ActiveItemsCount <= 1 ? "item" : "items") left!
                </div>

                <div class="flex justify-center flex-1 gap-[10px]">
                    <button
                        class="bg-white text-sm rounded-[3px] hover:border-[#bc3e45] py-0.5 px-2 @(currentFilter == Filter.All ? "border border-[#bc3e45]" : "border border-transparent")"
                        @onclick="() => SetFilter(Filter.All)">
                        All
                    </button>
                    <button
                        class="bg-white text-sm rounded-[3px] hover:border hover:border-[#bc3e45] py-0.5 px-2 @(currentFilter == Filter.Active ? "border border-[#bc3e45]" : "border border-transparent")"
                        @onclick="() => SetFilter(Filter.Active)">
                        Active
                    </button>
                    <button
                        class="bg-white text-sm rounded-[3px] hover:border hover:border-[#bc3e45] py-0.5 px-2 @(currentFilter == Filter.Completed ? "border border-[#bc3e45]" : "border border-transparent")"
                        @onclick="() => SetFilter(Filter.Completed)">
                        Completed
                    </button>
                </div>

                <button class="bg-white text-sm cursor-pointer hover:underline" @onclick="ClearCompleted">
                    Clear completed
                </button>
            </div>
        </footer>
    }
</main>

@code {
    private List<TodoItem> todos = new();
    private string? newTodo;
    private Filter currentFilter = Filter.All;
    private bool isVButtonClicked;

    private ElementReference editInput;
    private bool shouldFocusEditInput;

    private IEnumerable<TodoItem> filteredTodos => currentFilter switch
    {
        Filter.Active => todos.Where(t => !t.IsDone),
        Filter.Completed => todos.Where(t => t.IsDone),
        _ => todos
    };

    private int ActiveItemsCount => todos.Count(t => !t.IsDone);

    private void AddTodo()
    {
        if (!string.IsNullOrWhiteSpace(newTodo))
        {
            todos.Add(new TodoItem { Title = newTodo, IsDone = false });
            newTodo = string.Empty;
        }
    }

    private void HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            AddTodo();
        }
    }

    private void ToggleCompleted(TodoItem todo) => todo.IsDone = !todo.IsDone;

    private void RemoveTodo(TodoItem todo) => todos.Remove(todo);

    private void ClearCompleted() => todos = todos.Where(todo => !todo.IsDone).ToList();

    private void SetFilter(Filter filter) => currentFilter = filter;

    private void StartEditing(TodoItem todo)
    {
        todo.IsBeingEdited = true;
        shouldFocusEditInput = true;
    }

    private void SaveEditOnEnter(KeyboardEventArgs e, TodoItem todo)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(todo.Title))
        {
            todo.IsBeingEdited = false;
        }
    }

    private void StopEditing(TodoItem todo)
    {
        if (string.IsNullOrWhiteSpace(todo.Title))
        {
            todo.Title = "Untitled";
        }
        todo.IsBeingEdited = false;
    }

    private void CloseEditing()
    {
        foreach (var todo in todos.Where(t => t.IsBeingEdited))
        {
            StopEditing(todo);
        }
    }

    private async Task HandleVButtonClick()
    {
        isVButtonClicked = true;
        CheckAllActiveTodos();
        StateHasChanged();
        await Task.Delay(300);
        isVButtonClicked = false;
        StateHasChanged();
    }

    private void CheckAllActiveTodos()
    {
        foreach (var todo in todos.Where(t => !t.IsDone))
        {
            todo.IsDone = true;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (shouldFocusEditInput)
        {
            shouldFocusEditInput = false;
            await editInput.FocusAsync();
        }
    }
}
